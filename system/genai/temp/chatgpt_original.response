{
    "models": [
        {
            "classname": "Wine",
            "code": "from sqlalchemy import Column, Integer, String, Date, ForeignKey\nfrom sqlalchemy.orm import declarative_base, relationship\n\nBase = declarative_base()\n\nclass Wine(Base):\n    \"\"\"\n    description: This table stores information about different wines in the diary.\n    \"\"\"\n    __tablename__ = 'wine'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(100), nullable=False)\n    varietal = Column(String(50), nullable=False)\n    year = Column(Integer)\n    vineyard_id = Column(Integer, ForeignKey('vineyard.id'))",
            "description": "This table stores information about different wines in the diary.",
            "name": "wine"
        },
        {
            "classname": "Vineyard",
            "code": "class Vineyard(Base):\n    \"\"\"\n    description: This table contains information about vineyards associated with wines.\n    \"\"\"\n    __tablename__ = 'vineyard'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(100), nullable=False)\n    country = Column(String(50))",
            "description": "This table contains information about vineyards associated with wines.",
            "name": "vineyard"
        },
        {
            "classname": "Tasting",
            "code": "class Tasting(Base):\n    \"\"\"\n    description: This table records individual wine tastings, including scores and notes.\n    \"\"\"\n    __tablename__ = 'tasting'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    wine_id = Column(Integer, ForeignKey('wine.id'))\n    date = Column(Date, nullable=False)\n    score = Column(Integer)\n    notes = Column(String(255))",
            "description": "This table records individual wine tastings, including scores and notes.",
            "name": "tasting"
        },
        {
            "classname": "Taster",
            "code": "class Taster(Base):\n    \"\"\"\n    description: This table stores information about individuals who taste wines.\n    \"\"\"\n    __tablename__ = 'taster'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(100), nullable=False)\n    experience_level = Column(String(50))",
            "description": "This table stores information about individuals who taste wines.",
            "name": "taster"
        },
        {
            "classname": "Event",
            "code": "class Event(Base):\n    \"\"\"\n    description: This table logs events where wine tastings occur.\n    \"\"\"\n    __tablename__ = 'event'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(100), nullable=False)\n    date = Column(Date, nullable=False)\n    location = Column(String(100))",
            "description": "This table logs events where wine tastings occur.",
            "name": "event"
        },
        {
            "classname": "TastingEvent",
            "code": "class TastingEvent(Base):\n    \"\"\"\n    description: This table maps tastings to events they belong to.\n    \"\"\"\n    __tablename__ = 'tasting_event'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    tasting_id = Column(Integer, ForeignKey('tasting.id'))\n    event_id = Column(Integer, ForeignKey('event.id'))",
            "description": "This table maps tastings to events they belong to.",
            "name": "tasting_event"
        },
        {
            "classname": "WineType",
            "code": "class WineType(Base):\n    \"\"\"\n    description: This table categorizes wines into different types such as red, white, sparkling, etc.\n    \"\"\"\n    __tablename__ = 'wine_type'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(50), nullable=False)\n    description = Column(String(255))",
            "description": "This table categorizes wines into different types such as red, white, sparkling, etc.",
            "name": "wine_type"
        },
        {
            "classname": "WineTasting",
            "code": "class WineTasting(Base):\n    \"\"\"\n    description: This table associates wines with their tastings.\n    \"\"\"\n    __tablename__ = 'wine_tasting'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    wine_id = Column(Integer, ForeignKey('wine.id'))\n    tasting_id = Column(Integer, ForeignKey('tasting.id'))",
            "description": "This table associates wines with their tastings.",
            "name": "wine_tasting"
        },
        {
            "classname": "TasterTasting",
            "code": "class TasterTasting(Base):\n    \"\"\"\n    description: This table links tasters to the tastings they have performed.\n    \"\"\"\n    __tablename__ = 'taster_tasting'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    taster_id = Column(Integer, ForeignKey('taster.id'))\n    tasting_id = Column(Integer, ForeignKey('tasting.id'))",
            "description": "This table links tasters to the tastings they have performed.",
            "name": "taster_tasting"
        },
        {
            "classname": "WineReview",
            "code": "class WineReview(Base):\n    \"\"\"\n    description: This table stores reviews made by tasters for each wine.\n    \"\"\"\n    __tablename__ = 'wine_review'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    wine_id = Column(Integer, ForeignKey('wine.id'))\n    taster_id = Column(Integer, ForeignKey('taster.id'))\n    review = Column(String(255))\n    rating = Column(Integer)",
            "description": "This table stores reviews made by tasters for each wine.",
            "name": "wine_review"
        },
        {
            "classname": "VineyardWine",
            "code": "class VineyardWine(Base):\n    \"\"\"\n    description: This table creates a many-to-many relationship between vineyards and wines.\n    \"\"\"\n    __tablename__ = 'vineyard_wine'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    vineyard_id = Column(Integer, ForeignKey('vineyard.id'))\n    wine_id = Column(Integer, ForeignKey('wine.id'))",
            "description": "This table creates a many-to-many relationship between vineyards and wines.",
            "name": "vineyard_wine"
        },
        {
            "classname": "TastingNote",
            "code": "class TastingNote(Base):\n    \"\"\"\n    description: This table allows for detailed notes about each tasting session.\n    \"\"\"\n    __tablename__ = 'tasting_note'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    tasting_id = Column(Integer, ForeignKey('tasting.id'), nullable=False)\n    note = Column(String(255), nullable=False)",
            "description": "This table allows for detailed notes about each tasting session.",
            "name": "tasting_note"
        }
    ],
    "rules": [],
    "test_data": "from datetime import date\n\n# Wine Test Data\nwine1 = Wine(name='Chardonnay', varietal='Chardonnay', year=2020, vineyard_id=1)\nwine2 = Wine(name='Merlot', varietal='Merlot', year=2018, vineyard_id=2)\nwine3 = Wine(name='Cabernet Sauvignon', varietal='Cabernet Sauvignon', year=2019, vineyard_id=1)\nwine4 = Wine(name='Pinot Noir', varietal='Pinot Noir', year=2017, vineyard_id=3)\n\n# Vineyard Test Data\nvineyard1 = Vineyard(name='Napa Valley', country='USA')\nvineyard2 = Vineyard(name='Bordeaux', country='France')\nvineyard3 = Vineyard(name='Tuscany', country='Italy')\nvineyard4 = Vineyard(name='Barossa Valley', country='Australia')\n\n# Tasting Test Data\ntasting1 = Tasting(wine_id=1, date=date(2023, 3, 15), score=90, notes='Crisp and fresh with apple notes')\ntasting2 = Tasting(wine_id=2, date=date(2023, 5, 20), score=85, notes='Smooth and flavorful with berry tones')\ntasting3 = Tasting(wine_id=3, date=date(2023, 7, 25), score=92, notes='Rich and complex with oak finish')\ntasting4 = Tasting(wine_id=4, date=date(2023, 9, 10), score=88, notes='Delicate and balanced with cherry undertones')\n\n# Taster Test Data\ntaster1 = Taster(name='Alice Johnson', experience_level='Intermediate')\ntaster2 = Taster(name='Bob Smith', experience_level='Advanced')\ntaster3 = Taster(name='Charlie Brown', experience_level='Beginner')\ntaster4 = Taster(name='Diana Prince', experience_level='Expert')\n\n# Event Test Data\nevent1 = Event(name='Spring Wine Tasting', date=date(2023, 3, 15), location='New York')\nevent2 = Event(name='Summer Wine Expo', date=date(2023, 6, 18), location='San Francisco')\nevent3 = Event(name='Autumn Harvest Festival', date=date(2023, 9, 10), location='Chicago')\nevent4 = Event(name='Winter Wine Gala', date=date(2023, 12, 5), location='Boston')\n\n# TastingEvent Test Data\ntasting_event1 = TastingEvent(tasting_id=1, event_id=1)\ntasting_event2 = TastingEvent(tasting_id=2, event_id=2)\ntasting_event3 = TastingEvent(tasting_id=3, event_id=3)\ntasting_event4 = TastingEvent(tasting_id=4, event_id=4)\n\n# WineType Test Data\nwine_type1 = WineType(name='Red Wine', description='Includes various red wines')\nwine_type2 = WineType(name='White Wine', description='Includes various white wines')\nwine_type3 = WineType(name='Sparkling Wine', description='Includes various sparkling wines')\nwine_type4 = WineType(name='Rose Wine', description='Includes rose wines')\n\n# WineTasting Test Data\nwine_tasting1 = WineTasting(wine_id=1, tasting_id=1)\nwine_tasting2 = WineTasting(wine_id=2, tasting_id=2)\nwine_tasting3 = WineTasting(wine_id=3, tasting_id=3)\nwine_tasting4 = WineTasting(wine_id=4, tasting_id=4)\n\n# TasterTasting Test Data\ntaster_tasting1 = TasterTasting(taster_id=1, tasting_id=1)\ntaster_tasting2 = TasterTasting(taster_id=2, tasting_id=2)\ntaster_tasting3 = TasterTasting(taster_id=3, tasting_id=3)\ntaster_tasting4 = TasterTasting(taster_id=4, tasting_id=4)\n\n# WineReview Test Data\nwine_review1 = WineReview(wine_id=1, taster_id=1, review='Impressive balance and elegance', rating=5)\nwine_review2 = WineReview(wine_id=2, taster_id=2, review='Good but slightly acidic', rating=4)\nwine_review3 = WineReview(wine_id=3, taster_id=3, review='Smooth with remarkable finish', rating=5)\nwine_review4 = WineReview(wine_id=4, taster_id=4, review='Pleasant flavor but needs time to mature', rating=3)\n\n# VineyardWine Test Data\nvineyard_wine1 = VineyardWine(vineyard_id=1, wine_id=1)\nvineyard_wine2 = VineyardWine(vineyard_id=2, wine_id=2)\nvineyard_wine3 = VineyardWine(vineyard_id=1, wine_id=3)\nvineyard_wine4 = VineyardWine(vineyard_id=3, wine_id=4)\n\n# TastingNote Test Data\ntasting_note1 = TastingNote(tasting_id=1, note='Perfect for sipping')\ntasting_note2 = TastingNote(tasting_id=2, note='Pairs well with cheese')\ntasting_note3 = TastingNote(tasting_id=3, note='Best enjoyed with a hearty meal')\ntasting_note4 = TastingNote(tasting_id=4, note='Ideal for celebrations')",
    "name": "WineDiaryApp"
}